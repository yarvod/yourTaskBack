name: CI

on:
  push:
    branches: [ "master" ]

  workflow_dispatch:


jobs:
  check:
    name: Check changed files
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.check_files.outputs.backend }}
      nginx: ${{ steps.check_files.outputs.nginx }}
      redis: ${{ steps.check_files.outputs.redis }}
      postgres: ${{ steps.check_files.outputs.postgres }}
    environment:
      name: your-task-back-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file; do
            echo $file
            if [[ $file == backend/* ]] || [[ $file == .github/* ]] || [[ $file == docker-compose.* ]]; then
              echo "backend=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == frontend/* ]] || [[ $file == .github/* ]] || [[ $file == docker-compose.* ]]; then
              echo "nginx=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == redis/* ]] || [[ $file == .github/* ]] || [[ $file == docker-compose.* ]]; then
              echo "redis=true" >> $GITHUB_OUTPUT
            fi
            if [[ $file == postgres/* ]] || [[ $file == .github/* ]] || [[ $file == docker-compose.* ]]; then
              echo "postgres=true" >> $GITHUB_OUTPUT
            fi
          done < files.txt
          echo $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: check
    outputs:
      backend_rebuilt: ${{ steps.backend_rebuild.outputs.backend_rebuilt }}
    environment:
      name: your-task-back-env
    steps:
      - name: Chekout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Log in to Registry
        run: echo ${{ secrets.GITHUB }} | docker login ghcr.io -u yarvod --password-stdin

      - if: needs.check.outputs.backend == 'true'
        id: backend_rebuild
        name: Backend -- build and push
        run: |
          docker build backend/ -t ghcr.io/yarvod/your-task-back/your-task-back-backend:latest
          docker push ghcr.io/yarvod/your-task-back/your-task-back-backend:latest
          echo "backend_rebuilt=true" >> $GITHUB_OUTPUT

      - if: needs.check.outputs.nginx == 'true'
        name: Frontend -- build and push
        run: |
          docker build frontend/ -t ghcr.io/yarvod/your-task-back/your-task-back-nginx:latest
          docker push ghcr.io/yarvod/your-task-back/your-task-back-nginx:latest

      - if: needs.check.outputs.redis == 'true'
        name: Redis -- build and push
        run: |
          docker build redis/ -t ghcr.io/yarvod/your-task-back/your-task-back-redis:latest
          docker push ghcr.io/yarvod/your-task-back/your-task-back-redis:latest

      - if: needs.check.outputs.postgres == 'true'
        name: Postgres -- build and push
        run: |
          docker build postgres/ -t ghcr.io/yarvod/your-task-back/your-task-back-postgres:latest
          docker push ghcr.io/yarvod/your-task-back/your-task-back-postgres:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: your-task-back-env
    steps:
      - name: Chekout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Create env file
        run: |
          touch .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
#          echo HOST=${{ secrets.HOST }} >> .env
#          echo HTTP=${{ secrets.HTTP }} >> .env
#          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
#          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
#          echo postgres=${{ secrets.ENGINE }} >> .env
#          echo postgres=${{ secrets.postgres }} >> .env
#          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
#          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
#          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
#          echo GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }} >> .env
#          echo GOOGLE_OAUTH2_SECRET=${{ secrets.GOOGLE_OAUTH2_SECRET }} >> .env
#          echo GOOGLE_OAUTH2_REDIRECT=${{ secrets.GOOGLE_OAUTH2_REDIRECT }} >> .env
#          echo GOOGLE_OAUTH2_CLIENT_ID=${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }} >> .env
#          echo YANDEX_OAUTH2_SECRET=${{ secrets.YANDEX_OAUTH2_SECRET }} >> .env
#          echo YANDEX_OAUTH2_REDIRECT=${{ secrets.YANDEX_OAUTH2_REDIRECT }} >> .env
      - name: Log in to Registry
        run: echo ${{ secrets.GITHUB }} | docker login ghcr.io -u yarvod --password-stdin
      - if: needs.build.outputs.backend_rebuilt == 'true'
        name: Run compose
        run: docker-compose up -d backend
      - if: needs.build.outputs.backend_rebuilt == 'true'
        name: Test backend
        run: docker exec your-task-back-backend python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: your-task-back-env
    steps:
      - name: Chekout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Log in to Registry
        run: echo ${{ secrets.GITHUB }} | docker login ghcr.io -u yarvod --password-stdin
      - name: Invoke deployment hook
        uses: distributhor/workflow-webhook@v2
        env:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          data: '{ "weapon": "hammer", "drink" : "beer" }'